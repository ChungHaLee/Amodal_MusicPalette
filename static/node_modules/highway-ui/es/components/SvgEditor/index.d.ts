import React from 'react';
import 'subjx/dist/style/subjx.css';
import './index.less';
import { IMatrixObj } from '../../utils/parseMatrixToObject';
declare class SvgEditor extends React.Component<ISvgEditorProps, ISvgEditorStates, {}> {
    svgRef: any;
    dragInsList: any[];
    propTypes: any;
    drawData: any;
    static propTypes: any;
    constructor(props: ISvgEditorProps);
    componentDidMount(): void;
    mobxUseCallback: (b: any) => void;
    addParagraph: (drawData: any) => any;
    getPrevParagraph: (pointIoiIds: any, startIoiId: any, pointIdx: any, ioiList: any) => string;
    componentWillReceiveProps(nextProps: ISvgEditorProps): void;
    componentWillUnmount(): void;
    clearEvent(): void;
    addEvent(): void;
    addOutSideClickListener: (e: any) => void;
    initDrawData(data: any): void;
    initEvent(): void;
    getOptions(type: any): {
        scalable: boolean;
        resizable: boolean;
        rotatable: boolean;
        snap?: undefined;
    } | {
        snap: {
            x: number;
            y: number;
            angle: number;
        };
        scalable?: undefined;
        resizable?: undefined;
        rotatable?: undefined;
    };
    transferData(instance: any, index: any, type: any, detailType: any): void;
    refreshRoad(e: any, parentIndex: any): void;
    deleteCircle: (ele: any) => void;
    renderDrawData(screenIdx: any): JSX.Element[];
    getDrawData(type: any, detailType: any, item: any, index: any, screenIdx: any): false | JSX.Element | undefined;
    handleMenuToTop: (item: any, index: any) => void;
    handleMenuDelete: (item: any, index: any) => void;
    handleInitWrap: () => void;
    chooseColor: (v: any, type: any, paragraph: any, parentIndex: any) => JSX.Element;
    getParagraphIoiList: (val: any) => {
        startIoiId: any;
        endIoiid: any;
    } | {
        startIoiId?: undefined;
        endIoiid?: undefined;
    };
    handleChangeRoad: (v: any, colorValue: any, type: any, paragraph: any, parentIndex: any) => void;
    getColor: (value: any) => any;
    renderRoad: (item: any, parentIndex: any, screenIdx: any) => false | JSX.Element;
    getPopoverDom: (data: any, x1: any, y1: any, x2: any, y2: any, width: any, stroke: any, type: any, index: any, paragraph: any, parentIndex: any) => JSX.Element;
    handleCircleMouseMove: () => void;
    changeState: (type: any, x: any, y: any, cx: any, parentIndex: any) => void;
    refreshCirclePosition: (newPosition: any) => {
        x: number;
        y: number;
    };
    handleSaveSvgHorizontalLeft: () => void;
    handleSaveSvgHorizontalCenter: () => void;
    handleSaveSvgHorizontalRight: () => void;
    handleSaveSvgVerticalTop: () => void;
    handleSaveSvgVerticalMiddle: () => void;
    handleSaveSvgVerticalbottom: () => void;
    handleSaveSvgScale: (number: number) => void;
    handleSaveSvgDelete: () => void;
    getDragDataMatrix: () => IMatrixObj | undefined;
    getDragData: () => any;
    renderText(item: any, index: any, screenIdx: any): false | JSX.Element;
    renderParam(item: any, index: any, screenIdx: any): JSX.Element | undefined;
    renderImage(item: any, index: any, screenIdx: any): JSX.Element | undefined;
    renderRect(item: any, index: any, screenIdx: any): JSX.Element | undefined;
    renderOval(item: any, index: any, screenIdx: any): JSX.Element | undefined;
    renderPolygon(item: any, index: any, screenIdx: any): JSX.Element | undefined;
    renderLine(item: any, index: any, screenIdx: any): JSX.Element | undefined;
    renderDashedLine(item: any, index: any, screenIdx: any): JSX.Element | undefined;
    resetDrawData: () => void;
    getSvgDom(width: any, height: any, screenNum: any, scale: any, screenIdx: any): JSX.Element;
    tabChange: (e: any) => void;
    /**
     *
     * @param {Object} matrixObj Object
     * @param {number} containerWidth number
     * @param {number} containerHeight number
     * @param {number} width number
     * @param {number} height number
     *
     * @return {Object} matrixObj
     */
    reCalcTranslateXY: (matrixObj: any, containerWidth: any, containerHeight: any, width: any, height: any) => any;
    render(): JSX.Element;
}
export interface ISvgEditorProps {
    /**
     * @description 容器宽度
     * @default 200
     */
    width: number | string;
    /**
     * @description 容器高度
     * @default 200
     */
    height: number | string;
    /**
     * @description 渲染数据 参考mockDrawData数据
     * @default []
     */
    data: any;
    /**
     * @description svg容器缩放比例
     * @default 1
     */
    scale: number;
    /**
     * @description 分屏数量
     * @default 1
     */
    screenNum?: number;
    /**
     * @description 当前所在第几个屏
     * @default 0
     */
    screenIndex?: any;
    /**
     * @description 渲染模式 edit: 编辑模式 view: 视图模式
     * @default view
     */
    source: 'edit' | 'view';
    /**
     * @description 屏幕缩放毁掉函数
     */
    onChangeScale?: () => void;
    /**
     * @description data中数据改变回调函数
     */
    onDataChange?: (data: any[]) => void;
    /**
     * @description 分屏索引改变回调函数
     */
    onScreenIndexChange?: (idnex: number) => void;
}
export interface ISvgEditorStates {
    drawData: any[];
    newPointIoiIds: any[];
}
export default SvgEditor;
